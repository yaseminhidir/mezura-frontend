/* tslint:disable */
/* eslint-disable */
/**
 * Mezura v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'address1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'address2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'contactName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'contactNumber'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'contactEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'vergiDairesi'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'taxNo'?: string | null;
    /**
     * 
     * @type {Array<LedgerLog>}
     * @memberof Account
     */
    'ledgerLogs'?: Array<LedgerLog> | null;
    /**
     * 
     * @type {Array<Project>}
     * @memberof Account
     */
    'projects'?: Array<Project> | null;
    /**
     * 
     * @type {Tenant}
     * @memberof Account
     */
    'tenant'?: Tenant;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    'tenantId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Account
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface AccountBR
 */
export interface AccountBR {
    /**
     * 
     * @type {boolean}
     * @memberof AccountBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {Account}
     * @memberof AccountBR
     */
    'data'?: Account;
}
/**
 * 
 * @export
 * @interface AccountListBR
 */
export interface AccountListBR {
    /**
     * 
     * @type {boolean}
     * @memberof AccountListBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountListBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AccountListBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {Array<Account>}
     * @memberof AccountListBR
     */
    'data'?: Array<Account> | null;
}
/**
 * 
 * @export
 * @interface BR
 */
export interface BR {
    /**
     * 
     * @type {boolean}
     * @memberof BR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BR
     */
    'info'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof BR
     */
    'data'?: any | null;
}
/**
 * 
 * @export
 * @interface BooleanBR
 */
export interface BooleanBR {
    /**
     * 
     * @type {boolean}
     * @memberof BooleanBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BooleanBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BooleanBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BooleanBR
     */
    'data'?: boolean;
}
/**
 * 
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * 
     * @type {number}
     * @memberof Currency
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'dispLayName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'shortCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'symbolDisplayFormat'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Currency
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Currency
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface FreightBill
 */
export interface FreightBill {
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FreightBill
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FreightBill
     */
    'code'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FreightBill
     */
    'finalized'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'grossTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'discountTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'subTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'total'?: number;
    /**
     * 
     * @type {Currency}
     * @memberof FreightBill
     */
    'currency'?: Currency;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'currencyId'?: number;
    /**
     * 
     * @type {Tenant}
     * @memberof FreightBill
     */
    'tenant'?: Tenant;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'tenantId'?: number;
    /**
     * 
     * @type {Account}
     * @memberof FreightBill
     */
    'account'?: Account;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'accountId'?: number;
    /**
     * 
     * @type {Project}
     * @memberof FreightBill
     */
    'project'?: Project;
    /**
     * 
     * @type {number}
     * @memberof FreightBill
     */
    'projectId'?: number | null;
    /**
     * 
     * @type {Array<FreightBillLine>}
     * @memberof FreightBill
     */
    'freightBillLines'?: Array<FreightBillLine> | null;
    /**
     * 
     * @type {Array<LedgerLog>}
     * @memberof FreightBill
     */
    'ledgerLogs'?: Array<LedgerLog> | null;
    /**
     * 
     * @type {string}
     * @memberof FreightBill
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FreightBill
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FreightBill
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface FreightBillDetailResponse
 */
export interface FreightBillDetailResponse {
    /**
     * 
     * @type {FreightBill}
     * @memberof FreightBillDetailResponse
     */
    'freightBill'?: FreightBill;
    /**
     * 
     * @type {Array<Currency>}
     * @memberof FreightBillDetailResponse
     */
    'currencies'?: Array<Currency> | null;
    /**
     * 
     * @type {Array<Account>}
     * @memberof FreightBillDetailResponse
     */
    'accounts'?: Array<Account> | null;
    /**
     * 
     * @type {Array<ProductMain>}
     * @memberof FreightBillDetailResponse
     */
    'products'?: Array<ProductMain> | null;
}
/**
 * 
 * @export
 * @interface FreightBillDetailResponseBR
 */
export interface FreightBillDetailResponseBR {
    /**
     * 
     * @type {boolean}
     * @memberof FreightBillDetailResponseBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FreightBillDetailResponseBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FreightBillDetailResponseBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {FreightBillDetailResponse}
     * @memberof FreightBillDetailResponseBR
     */
    'data'?: FreightBillDetailResponse;
}
/**
 * 
 * @export
 * @interface FreightBillLine
 */
export interface FreightBillLine {
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FreightBillLine
     */
    'productName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FreightBillLine
     */
    'productDetailName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FreightBillLine
     */
    'finalized'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'taxRate'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'unitPrice'?: number;
    /**
     * 
     * @type {UnitType}
     * @memberof FreightBillLine
     */
    'unitType'?: UnitType;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'centimeters'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'widthCM'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'lengthCM'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'discountFlat'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'discountPercent'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'grossTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'discountTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'subTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'taxTotal'?: number;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'total'?: number;
    /**
     * 
     * @type {ProductMain}
     * @memberof FreightBillLine
     */
    'product'?: ProductMain;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'productId'?: number | null;
    /**
     * 
     * @type {ProductDetail}
     * @memberof FreightBillLine
     */
    'productDetail'?: ProductDetail;
    /**
     * 
     * @type {number}
     * @memberof FreightBillLine
     */
    'productDetailId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FreightBillLine
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof FreightBillLine
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof FreightBillLine
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface FreightBillListBR
 */
export interface FreightBillListBR {
    /**
     * 
     * @type {boolean}
     * @memberof FreightBillListBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FreightBillListBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FreightBillListBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {Array<FreightBill>}
     * @memberof FreightBillListBR
     */
    'data'?: Array<FreightBill> | null;
}
/**
 * 
 * @export
 * @interface LedgerLog
 */
export interface LedgerLog {
    /**
     * 
     * @type {number}
     * @memberof LedgerLog
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof LedgerLog
     */
    'paid'?: number;
    /**
     * 
     * @type {number}
     * @memberof LedgerLog
     */
    'toBePaid'?: number;
    /**
     * 
     * @type {Currency}
     * @memberof LedgerLog
     */
    'currency'?: Currency;
    /**
     * 
     * @type {number}
     * @memberof LedgerLog
     */
    'currencyId'?: number;
    /**
     * 
     * @type {Account}
     * @memberof LedgerLog
     */
    'account'?: Account;
    /**
     * 
     * @type {number}
     * @memberof LedgerLog
     */
    'accountId'?: number;
    /**
     * 
     * @type {Project}
     * @memberof LedgerLog
     */
    'project'?: Project;
    /**
     * 
     * @type {number}
     * @memberof LedgerLog
     */
    'projectId'?: number | null;
    /**
     * 
     * @type {Tenant}
     * @memberof LedgerLog
     */
    'tenant'?: Tenant;
    /**
     * 
     * @type {number}
     * @memberof LedgerLog
     */
    'tenantId'?: number;
    /**
     * 
     * @type {string}
     * @memberof LedgerLog
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof LedgerLog
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LedgerLog
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof LoginResponse
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface LoginResponseBR
 */
export interface LoginResponseBR {
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponseBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginResponseBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {LoginResponse}
     * @memberof LoginResponseBR
     */
    'data'?: LoginResponse;
}
/**
 * 
 * @export
 * @interface ProductDetail
 */
export interface ProductDetail {
    /**
     * 
     * @type {number}
     * @memberof ProductDetail
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductDetail
     */
    'price'?: number;
    /**
     * 
     * @type {UnitType}
     * @memberof ProductDetail
     */
    'unitType'?: UnitType;
    /**
     * 
     * @type {number}
     * @memberof ProductDetail
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductDetail
     */
    'taxRate'?: number;
    /**
     * 
     * @type {ProductMain}
     * @memberof ProductDetail
     */
    'productMain'?: ProductMain;
    /**
     * 
     * @type {number}
     * @memberof ProductDetail
     */
    'productMainId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductDetail
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductDetail
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductMain
 */
export interface ProductMain {
    /**
     * 
     * @type {number}
     * @memberof ProductMain
     */
    'id'?: number;
    /**
     * If a product has details it cannot be sold as master product it should be sold from the details
     * @type {boolean}
     * @memberof ProductMain
     */
    'hasDetails'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductMain
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductMain
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProductMain
     */
    'price'?: number;
    /**
     * 
     * @type {UnitType}
     * @memberof ProductMain
     */
    'unitType'?: UnitType;
    /**
     * 
     * @type {number}
     * @memberof ProductMain
     */
    'quantity'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductMain
     */
    'taxRate'?: number;
    /**
     * 
     * @type {Array<ProductDetail>}
     * @memberof ProductMain
     */
    'productDetails'?: Array<ProductDetail> | null;
    /**
     * 
     * @type {Tenant}
     * @memberof ProductMain
     */
    'tenant'?: Tenant;
    /**
     * 
     * @type {number}
     * @memberof ProductMain
     */
    'tenantId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductMain
     */
    'calculatedQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductMain
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductMain
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProductMain
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductMainBR
 */
export interface ProductMainBR {
    /**
     * 
     * @type {boolean}
     * @memberof ProductMainBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductMainBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductMainBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {ProductMain}
     * @memberof ProductMainBR
     */
    'data'?: ProductMain;
}
/**
 * 
 * @export
 * @interface ProductMainListBR
 */
export interface ProductMainListBR {
    /**
     * 
     * @type {boolean}
     * @memberof ProductMainListBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProductMainListBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductMainListBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {Array<ProductMain>}
     * @memberof ProductMainListBR
     */
    'data'?: Array<ProductMain> | null;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'description'?: string | null;
    /**
     * 
     * @type {Tenant}
     * @memberof Project
     */
    'tenant'?: Tenant;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'tenantId'?: number;
    /**
     * 
     * @type {Account}
     * @memberof Project
     */
    'account'?: Account;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    'accountId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Project
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'surname'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RegisterRequest
     */
    'tenantId'?: number;
}
/**
 * 
 * @export
 * @interface RegisterResponse
 */
export interface RegisterResponse {
    /**
     * 
     * @type {User}
     * @memberof RegisterResponse
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface RegisterResponseBR
 */
export interface RegisterResponseBR {
    /**
     * 
     * @type {boolean}
     * @memberof RegisterResponseBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponseBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterResponseBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {RegisterResponse}
     * @memberof RegisterResponseBR
     */
    'data'?: RegisterResponse;
}
/**
 *     0 = SeeAccounts    1 = EditAccounts    2 = SeeProducts    3 = EditProducts    4 = SeeProjects    5 = EditProjects    6 = SeeShipments    7 = EditShipments    8 = SeeUsers    9 = EditUsers    -1 = Admin
 * @export
 * @enum {string}
 */

export enum RoleType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5,
    NUMBER_6 = 6,
    NUMBER_7 = 7,
    NUMBER_8 = 8,
    NUMBER_9 = 9,
    NUMBER_MINUS_1 = -1
}

/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {number}
     * @memberof Tenant
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'logoPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'invoiceTitle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'addressLine1'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'addressLine2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'phone'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Tenant
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {Array<User>}
     * @memberof Tenant
     */
    'users'?: Array<User> | null;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Tenant
     */
    '_delete'?: boolean;
}
/**
 *     0 = Meter    1 = SquareMeter    2 = Quantity
 * @export
 * @enum {string}
 */

export enum UnitType {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'surname'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'salt'?: string | null;
    /**
     * 
     * @type {Tenant}
     * @memberof User
     */
    'tenant'?: Tenant;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'tenantId'?: number;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof User
     */
    'roles'?: Array<UserRole> | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    '_delete'?: boolean;
}
/**
 * 
 * @export
 * @interface UserBR
 */
export interface UserBR {
    /**
     * 
     * @type {boolean}
     * @memberof UserBR
     */
    'success'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserBR
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserBR
     */
    'info'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof UserBR
     */
    'data'?: User;
}
/**
 * 
 * @export
 * @interface UserRole
 */
export interface UserRole {
    /**
     * 
     * @type {number}
     * @memberof UserRole
     */
    'id'?: number;
    /**
     * 
     * @type {User}
     * @memberof UserRole
     */
    'user'?: User;
    /**
     * 
     * @type {number}
     * @memberof UserRole
     */
    'userId'?: number;
    /**
     * 
     * @type {RoleType}
     * @memberof UserRole
     */
    'roleNumber'?: RoleType;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserRole
     */
    '_delete'?: boolean;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/account/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsIdDeleteDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountAccountsIdDeleteDelete', 'id', id)
            const localVarPath = `/account/accounts/{id}/delete`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountAccountsIdGet', 'id', id)
            const localVarPath = `/account/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsIdSavePost: async (id: string, account?: Account, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountAccountsIdSavePost', 'id', id)
            const localVarPath = `/account/accounts/{id}/save`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAccountsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountListBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAccountsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAccountsIdDeleteDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAccountsIdDeleteDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAccountsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAccountsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountAccountsIdSavePost(id: string, account?: Account, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountAccountsIdSavePost(id, account, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsGet(options?: any): AxiosPromise<AccountListBR> {
            return localVarFp.accountAccountsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsIdDeleteDelete(id: number, options?: any): AxiosPromise<BR> {
            return localVarFp.accountAccountsIdDeleteDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsIdGet(id: number, options?: any): AxiosPromise<AccountBR> {
            return localVarFp.accountAccountsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {Account} [account] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountAccountsIdSavePost(id: string, account?: Account, options?: any): AxiosPromise<AccountBR> {
            return localVarFp.accountAccountsIdSavePost(id, account, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountAccountsGet(options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountAccountsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountAccountsIdDeleteDelete(id: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountAccountsIdDeleteDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountAccountsIdGet(id: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountAccountsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {Account} [account] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountAccountsIdSavePost(id: string, account?: Account, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountAccountsIdSavePost(id, account, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (loginRequest?: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (registerRequest?: RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(loginRequest?: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(registerRequest?: RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterResponseBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPost(options?: any): AxiosPromise<UserBR> {
            return localVarFp.getUserPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(loginRequest?: LoginRequest, options?: any): AxiosPromise<LoginResponseBR> {
            return localVarFp.loginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(options?: any): AxiosPromise<BR> {
            return localVarFp.logoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequest} [registerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(registerRequest?: RegisterRequest, options?: any): AxiosPromise<RegisterResponseBR> {
            return localVarFp.registerPost(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getUserPost(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getUserPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginPost(loginRequest?: LoginRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).loginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logoutPost(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).logoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequest} [registerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerPost(registerRequest?: RegisterRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).registerPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FreightBillApi - axios parameter creator
 * @export
 */
export const FreightBillApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FreightBill} [freightBill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsFinalizePost: async (freightBill?: FreightBill, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/freightbills/bills/finalize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(freightBill, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/freightbills/bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('freightbillsBillsIdDelete', 'id', id)
            const localVarPath = `/freightbills/bills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('freightbillsBillsIdGet', 'id', id)
            const localVarPath = `/freightbills/bills/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FreightBill} [freightBill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsPost: async (freightBill?: FreightBill, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/freightbills/bills`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(freightBill, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FreightBillApi - functional programming interface
 * @export
 */
export const FreightBillApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FreightBillApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FreightBill} [freightBill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async freightbillsBillsFinalizePost(freightBill?: FreightBill, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FreightBillDetailResponseBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.freightbillsBillsFinalizePost(freightBill, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async freightbillsBillsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FreightBillListBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.freightbillsBillsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async freightbillsBillsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.freightbillsBillsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async freightbillsBillsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FreightBillDetailResponseBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.freightbillsBillsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FreightBill} [freightBill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async freightbillsBillsPost(freightBill?: FreightBill, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FreightBillDetailResponseBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.freightbillsBillsPost(freightBill, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FreightBillApi - factory interface
 * @export
 */
export const FreightBillApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FreightBillApiFp(configuration)
    return {
        /**
         * 
         * @param {FreightBill} [freightBill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsFinalizePost(freightBill?: FreightBill, options?: any): AxiosPromise<FreightBillDetailResponseBR> {
            return localVarFp.freightbillsBillsFinalizePost(freightBill, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsGet(options?: any): AxiosPromise<FreightBillListBR> {
            return localVarFp.freightbillsBillsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsIdDelete(id: number, options?: any): AxiosPromise<BooleanBR> {
            return localVarFp.freightbillsBillsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsIdGet(id: number, options?: any): AxiosPromise<FreightBillDetailResponseBR> {
            return localVarFp.freightbillsBillsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FreightBill} [freightBill] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freightbillsBillsPost(freightBill?: FreightBill, options?: any): AxiosPromise<FreightBillDetailResponseBR> {
            return localVarFp.freightbillsBillsPost(freightBill, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FreightBillApi - object-oriented interface
 * @export
 * @class FreightBillApi
 * @extends {BaseAPI}
 */
export class FreightBillApi extends BaseAPI {
    /**
     * 
     * @param {FreightBill} [freightBill] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreightBillApi
     */
    public freightbillsBillsFinalizePost(freightBill?: FreightBill, options?: AxiosRequestConfig) {
        return FreightBillApiFp(this.configuration).freightbillsBillsFinalizePost(freightBill, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreightBillApi
     */
    public freightbillsBillsGet(options?: AxiosRequestConfig) {
        return FreightBillApiFp(this.configuration).freightbillsBillsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreightBillApi
     */
    public freightbillsBillsIdDelete(id: number, options?: AxiosRequestConfig) {
        return FreightBillApiFp(this.configuration).freightbillsBillsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreightBillApi
     */
    public freightbillsBillsIdGet(id: number, options?: AxiosRequestConfig) {
        return FreightBillApiFp(this.configuration).freightbillsBillsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FreightBill} [freightBill] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FreightBillApi
     */
    public freightbillsBillsPost(freightBill?: FreightBill, options?: AxiosRequestConfig) {
        return FreightBillApiFp(this.configuration).freightbillsBillsPost(freightBill, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsProductIdDelete', 'id', id)
            const localVarPath = `/products/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsProductIdGet', 'id', id)
            const localVarPath = `/products/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductMain} [productMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductPost: async (productMain?: ProductMain, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productMain, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductMainBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductMainBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductMain} [productMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductPost(productMain?: ProductMain, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductMainBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductPost(productMain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsProductsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductMainListBR>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsProductsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdDelete(id: number, options?: any): AxiosPromise<ProductMainBR> {
            return localVarFp.productsProductIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductIdGet(id: number, options?: any): AxiosPromise<ProductMainBR> {
            return localVarFp.productsProductIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductMain} [productMain] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductPost(productMain?: ProductMain, options?: any): AxiosPromise<ProductMainBR> {
            return localVarFp.productsProductPost(productMain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsProductsGet(options?: any): AxiosPromise<ProductMainListBR> {
            return localVarFp.productsProductsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productsProductIdDelete(id: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productsProductIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productsProductIdGet(id: number, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productsProductIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductMain} [productMain] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productsProductPost(productMain?: ProductMain, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productsProductPost(productMain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public productsProductsGet(options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).productsProductsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


